// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeopleManager.Infrastructure.Database;

namespace PeopleManager.Infrastructure.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200217081326_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("PeopleManager.Core.Entity.CertificateInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AirplaneModelKey")
                        .HasColumnName("airplane_model_key");

                    b.Property<string>("AirplaneModelValue")
                        .HasColumnName("airplane_model_value");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime?>("GetDate")
                        .HasColumnName("get_date");

                    b.Property<DateTime?>("LastEndorseDate")
                        .HasColumnName("last_endorse_date");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PassDate")
                        .HasColumnName("pass_date");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("TypeKey")
                        .HasColumnName("type_key");

                    b.Property<string>("TypeValue")
                        .HasColumnName("type_value");

                    b.Property<string>("ValidKey")
                        .HasColumnName("valid_key");

                    b.Property<string>("ValidValue")
                        .HasColumnName("valid_value");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("t_certificate_info");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.LicenseInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<string>("LicenseName")
                        .HasColumnName("license_name");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<string>("ValidKey")
                        .HasColumnName("valid_key");

                    b.Property<string>("ValidValue")
                        .HasColumnName("valid_value");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("t_license_info");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.PersonInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday");

                    b.Property<string>("BloodType")
                        .HasColumnName("blood_type");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("EducationKey")
                        .HasColumnName("education_key");

                    b.Property<string>("EducationValue")
                        .HasColumnName("education_value");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnName("employment_date");

                    b.Property<string>("Gender")
                        .HasColumnName("gender");

                    b.Property<string>("HouseAddress")
                        .HasColumnName("house_address");

                    b.Property<string>("MarriageStatus")
                        .HasColumnName("marriage_status");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<string>("Nation")
                        .HasColumnName("nation");

                    b.Property<string>("Nationality")
                        .HasColumnName("nationality");

                    b.Property<string>("NativePlace")
                        .HasColumnName("native_place");

                    b.Property<long>("OriginalId")
                        .HasColumnName("original_id")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photo_path");

                    b.Property<DateTime?>("QualificationExpirationDate")
                        .HasColumnName("qualification_expiration_date");

                    b.Property<DateTime?>("QualificationGetDate")
                        .HasColumnName("qualification_get_date");

                    b.Property<string>("QualificationName")
                        .HasColumnName("qualification_name");

                    b.Property<string>("QualificationTypeKey")
                        .HasColumnName("qualification_type_key");

                    b.Property<string>("QualificationTypeValue")
                        .HasColumnName("qualification_type_value");

                    b.Property<string>("RegularAddress")
                        .HasColumnName("regular_address");

                    b.Property<string>("SchoolTag")
                        .HasColumnName("school_tag");

                    b.Property<byte?>("SecLevel")
                        .HasColumnName("sec_level")
                        .HasColumnType("tinyint(2)");

                    b.Property<string>("StateOfHealth")
                        .HasColumnName("state_of_health");

                    b.Property<byte>("StudentFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("student_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("TeacherFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("teacher_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("UserEmail")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name");

                    b.Property<string>("UserNumber")
                        .IsRequired()
                        .HasColumnName("user_number");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnName("user_phone");

                    b.HasKey("Id");

                    b.ToTable("t_person_info");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.RewardsAndPunishmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("event_date");

                    b.Property<string>("EventName")
                        .HasColumnName("event_name");

                    b.Property<string>("EventResult")
                        .HasColumnName("event_result");

                    b.Property<string>("EventTypeKey")
                        .HasColumnName("event_type_key");

                    b.Property<string>("EventTypeValue")
                        .HasColumnName("event_type_value");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("t_rewards_and_punishment");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.TrainingRecordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("ProjectName")
                        .HasColumnName("project_name");

                    b.Property<string>("StatusKey")
                        .HasColumnName("status_key");

                    b.Property<string>("StatusValue")
                        .HasColumnName("status_value");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnName("training_date");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("t_training_record");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.WorkInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<double>("ActualDuration")
                        .HasColumnName("actual_duration");

                    b.Property<int>("ActualFlightNumber")
                        .HasColumnName("actual_flight_number");

                    b.Property<string>("AirplaneModelKey")
                        .HasColumnName("airplane_model_key");

                    b.Property<string>("AirplaneModelValue")
                        .HasColumnName("airplane_model_value");

                    b.Property<string>("BaseKey")
                        .HasColumnName("base_key");

                    b.Property<string>("BaseValue")
                        .HasColumnName("base_value");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("t_create");

                    b.Property<double>("CurrentActualDuration")
                        .HasColumnName("current_actual_duration");

                    b.Property<int>("CurrentFlightNumber")
                        .HasColumnName("current_flight_number");

                    b.Property<byte?>("DeleteFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_flag")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("DepartmentKey")
                        .HasColumnName("department_key");

                    b.Property<string>("DepartmentValue")
                        .HasColumnName("department_value");

                    b.Property<string>("FlyStatusKey")
                        .HasColumnName("fly_status_key");

                    b.Property<string>("FlyStatusValue")
                        .HasColumnName("fly_status_value");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("hire_date");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnName("t_modified");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("SkillLevelKey")
                        .HasColumnName("skill_level_key");

                    b.Property<string>("SkillLevelValue")
                        .HasColumnName("skill_level_value");

                    b.Property<string>("TeacherTypeKey")
                        .HasColumnName("teacher_type_key");

                    b.Property<string>("TeacherTypeValue")
                        .HasColumnName("teacher_type_value");

                    b.Property<double>("TotalDuration")
                        .HasColumnName("total_duration");

                    b.Property<double>("TrainingDuration")
                        .HasColumnName("training_duration");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("t_work_info");
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.CertificateInfoEntity", b =>
                {
                    b.HasOne("PeopleManager.Core.Entity.PersonInfoEntity", "PersonInfo")
                        .WithMany("CertificateInfos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.LicenseInfoEntity", b =>
                {
                    b.HasOne("PeopleManager.Core.Entity.PersonInfoEntity", "PersonInfo")
                        .WithMany("LicenseInfos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.RewardsAndPunishmentEntity", b =>
                {
                    b.HasOne("PeopleManager.Core.Entity.PersonInfoEntity", "PersonInfo")
                        .WithMany("RewardsAndPunishments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.TrainingRecordEntity", b =>
                {
                    b.HasOne("PeopleManager.Core.Entity.PersonInfoEntity", "PersonInfo")
                        .WithMany("TrainingRecords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeopleManager.Core.Entity.WorkInfoEntity", b =>
                {
                    b.HasOne("PeopleManager.Core.Entity.PersonInfoEntity", "PersonInfo")
                        .WithMany("WorkInfos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
